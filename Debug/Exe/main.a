;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : ATmega External ADC
;Version :
;Date    : 28/11/2019
;Author  : Rama Setyawan
;Company : PENS
;Comments:
;
;
;Chip type               : ATmega162
;Program type            : Application
;AVR Core Clock frequency: 12,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega162.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000004 VOL: 0
	#endif
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <string.h>
;#include <math.h>
;
;// Declare your global variables here
;int ADC;
;float voltage;
;long temp;
;char buff[20],buff1[20];
;
;long RL = 1000; // 1000 Ohm

	.DSEG
;long Ro = 830; // 830 ohm ( SILAHKAN DISESUAIKAN)
;
;float Rs;
;float ppm;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar1(void)
; 0000 0034 {

	.CSEG
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
; 0000 0035 char status,data;
; 0000 0036 while (1)
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000000B VOL: 0
; 0000 0037       {
; 0000 0038       while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0039       data=UDR1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003A       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003B          return data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003C       }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003D }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 0043 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0044 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000023 VOL: 0
;	c -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0045 UDR1=c;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0046 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;#pragma used-
;
;void main(void)
; 0000 004A {
;PCODE: $0000002F VOL: 0
; 0000 004B // Declare your local variables here
; 0000 004C 
; 0000 004D // Crystal Oscillator division factor: 1
; 0000 004E #pragma optsize-
; 0000 004F CLKPR=(1<<CLKPCE);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0050 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0051 #ifdef _OPTIMIZE_SIZE_
; 0000 0052 #pragma optsize+
; 0000 0053 #endif
; 0000 0054 
; 0000 0055 // Input/Output Ports initialization
; 0000 0056 // Port A initialization
; 0000 0057 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0058 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0059 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 005B 
; 0000 005C // Port B initialization
; 0000 005D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 005F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0060 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0061 
; 0000 0062 // Port C initialization
; 0000 0063 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0064 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0065 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0066 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0067 
; 0000 0068 // Port D initialization
; 0000 0069 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 006D 
; 0000 006E // Port E initialization
; 0000 006F // Function: Bit2=In Bit1=In Bit0=In
; 0000 0070 DDRE=(0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0071 // State: Bit2=T Bit1=T Bit0=T
; 0000 0072 PORTE=(0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0073 
; 0000 0074 // USART0 initialization
; 0000 0075 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0076 // USART0 Receiver: Off
; 0000 0077 // USART0 Transmitter: On
; 0000 0078 // USART0 Mode: Asynchronous
; 0000 0079 // USART0 Baud Rate: 9600
; 0000 007A UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007B UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007C UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 007D UBRR0H=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007E UBRR0L=0x4D;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 007F 
; 0000 0080 // USART1 initialization
; 0000 0081 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0082 // USART1 Receiver: On
; 0000 0083 // USART1 Transmitter: On
; 0000 0084 // USART1 Mode: Asynchronous
; 0000 0085 // USART1 Baud Rate: 9600
; 0000 0086 UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0087 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0088 UCSR1C=(0<<UMSEL1) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0089 UBRR1H=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008A UBRR1L=0x4D;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008B 
; 0000 008C while (1)
;PCODE: $0000005C VOL: 0
; 0000 008D       {
; 0000 008E       // Place your code here
; 0000 008F 
; 0000 0090       voltage = PINA * (5.0/255.0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0091       ADC = PINA;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0092       temp = (((int)5 * ADC * 0.3921));
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0093       ftoa(voltage,1,buff);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0094       ftoa(temp,1,buff1);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0095       //printf("ADC : %d || V : %s || Temp : %s C\n",ADC,buff,buff1);
; 0000 0096       printf("%s %d\r",buff1,100);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0097 
; 0000 0098       delay_ms(100);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0099       }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 009A }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
